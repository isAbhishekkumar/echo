name: nightly

on:
  push:
    branches:
      - main
  workflow_dispatch: { }

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set VERSION and COMMIT
        shell: bash
        run: |
          set -euo pipefail

          # Short SHA (7 chars)
          VERSION=${GITHUB_SHA:0:7}
          echo "VERSION=$VERSION" >> $GITHUB_ENV

          # Extract commit message from the event payload safely
          if [ -n "${GITHUB_EVENT_PATH:-}" ] && [ -f "$GITHUB_EVENT_PATH" ]; then
            COMMIT=$(jq -r '.head_commit.message // ""' "$GITHUB_EVENT_PATH" | sed -E 's/(.*) <.*@.*>/\1/g;t')
          else
            COMMIT="${{ github.event.head_commit.message }}"
          fi
          # Trim whitespace
          COMMIT=$(printf "%s" "$COMMIT" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
          echo "COMMIT=$COMMIT" >> $GITHUB_ENV
          echo "Set VERSION=$VERSION and COMMIT=$COMMIT"

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: 17
          cache: 'gradle'

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build with Gradle (sign if keystore present)
        shell: bash
        run: |
          set -euo pipefail

          # If a base64 keystore secret exists, decode it and build with signing properties.
          if [ -n "${{ secrets.KEYSTORE_B64 }}" ]; then
            echo "Decoding keystore from secrets and building with signing..."
            echo "${{ secrets.KEYSTORE_B64 }}" | base64 -d > "$GITHUB_WORKSPACE/signing-key.jks"
            ./gradlew assembleNightly \
              -Pandroid.injected.signing.store.file=$GITHUB_WORKSPACE/signing-key.jks \
              -Pandroid.injected.signing.store.password=${{ secrets.PASSWORD }} \
              -Pandroid.injected.signing.key.alias=key0 \
              -Pandroid.injected.signing.key.password=${{ secrets.PASSWORD }}
          else
            echo "No keystore provided â€” building without signing (unsigned APK)."
            ./gradlew assembleNightly
          fi

          # Find the first APK produced and copy it to a stable path used by later steps.
          apk_path=$(find app/build/outputs -type f -name "*.apk" | head -n 1 || true)
          if [ -z "$apk_path" ]; then
            echo "ERROR: no APK found under app/build/outputs"
            exit 2
          fi
          echo "Found APK: $apk_path"
          mkdir -p app/build
          cp "$apk_path" "app/build/${{ env.VERSION }}.apk"

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          path: app/build/${{ env.VERSION }}.apk

      - name: Upload APK to Discord
        shell: bash
        env:
          ROLE: ${{ secrets.DISCORD_PING_ROLE_ID }}
          WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          message=$(echo "<@&${{ env.ROLE }}> **${{ env.VERSION }}**\n${{ env.COMMIT }}")
          curl -F "payload_json={\"content\":\"${message}\"}" \
          -F "echo_beta=@app/build/${{ env.VERSION }}.apk" \
          ${{ env.WEBHOOK }}

      - name: Upload APK to Telegram
        shell: bash
        env:
          BOT_ID: ${{ secrets.TELEGRAM_BOT_ID }}
          CHANNEL_ID: ${{ secrets.TELEGRAM_CHANNEL_ID }}
          THREAD_ID: ${{ secrets.TELEGRAM_THREAD_ID }}
        run: |
          regex='s/[\_\*\[\]\(\)\~\`\>\#\+\-\=\|\{\}\.\!]/\\&/g'
          message=$(printf "*Nightly Release*\n${{ env.COMMIT }}" | sed -E "$regex")
          curl -F "chat_id=${{ env.CHANNEL_ID }}" \
          -F "message_thread_id=${{ env.THREAD_ID }}" \
          -F "document=@app/build/${{ env.VERSION }}.apk" \
          -F "caption=${message}" \
          -F "parse_mode=MarkdownV2" \
          https://api.telegram.org/bot${{ env.BOT_ID }}/sendDocument
